name: Plan and Apply IAC

on:
    workflow_call:
        inputs:
            environment:
                required: true
                type: string
        secrets:
            GH_ROLE_ARN:
                required: true
            TF_ROLE_ARN:
                required: false
permissions:
    id-token: write
    contents: read
            
jobs:
  plan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          # Update package lists and install basic dependencies
          sudo apt-get update
          sudo apt-get install -y wget unzip jq

          # Install Terragrunt
          wget https://github.com/gruntwork-io/terragrunt/releases/download/v0.45.10/terragrunt_linux_amd64
          chmod +x terragrunt_linux_amd64
          sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt
          terragrunt -v

          # Install Chamber
          wget https://github.com/segmentio/chamber/releases/download/v2.10.4/chamber-v2.10.4-linux-amd64
          chmod +x chamber-v2.10.4-linux-amd64
          sudo mv chamber-v2.10.4-linux-amd64 /usr/local/bin/chamber
          chamber version

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.GH_ROLE_ARN }}
          role-session-name: OIDC

      - name: Assume Role & Source Environment
        run: |
            creds=$(aws sts assume-role --role-arn ${{ secrets.TF_ROLE_ARN }} --role-session-name ${{ github.run_id }})

            if [ $? -ne 0 ]; then
            echo "Failed to assume role: $creds"
            exit 1
            fi

            export AWS_ACCESS_KEY_ID=$(echo $creds | jq -r .AccessKeyId)
            export AWS_SECRET_ACCESS_KEY=$(echo $creds | jq -r .SecretAccessKey)
            export AWS_SESSION_TOKEN=$(echo $creds | jq -r .SessionToken)
        
            echo "$AWS_ACCESS_KEY_ID" >> $GITHUB_ENV
            echo "$AWS_SECRET_ACCESS_KEY" >> $GITHUB_ENV
            echo "$AWS_SESSION_TOKEN" >> $GITHUB_ENV
            
            export ENVIRONMENT="${{ inputs.environment }}"
            chamber env $ENVIRONMENT > /tmp/env_vars

            if [ -s /tmp/env_vars ]; then
                echo "Environment variables loaded successfully."
                set -a
                source /tmp/env_vars
                set +a
            else
                echo "Failed to load environment variables."
                exit 1
            fi

      - name: Initialize Terragrunt
        run: |
          cd ./terragrunt/environments/${{ inputs.environment }}
          terragrunt init

      - name: Run Terragrunt plan
        run: |
          cd ./terragrunt/environments/${{ inputs.environment }}
          terragrunt run-all plan -out=tfplan
          terragrunt show -json tfplan > plan_output.json

      - name: Upload plan output as artifact
        uses: actions/upload-artifact@v3
        with:
          name: terragrunt-plan-output-${{ inputs.environment }}
          path: ./terragrunt/environments/${{ inputs.environment }}/plan_output.json

  apply:
    runs-on: ubuntu-latest
    needs: [plan]
    if: github.event_name == 'pull_request' && contains(github.base_ref, 'refs/heads/master')

    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          # Update package lists and install basic dependencies
          sudo apt-get update
          sudo apt-get install -y wget unzip jq

          # Install Terragrunt
          wget https://github.com/gruntwork-io/terragrunt/releases/download/v0.45.10/terragrunt_linux_amd64
          chmod +x terragrunt_linux_amd64
          sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt
          terragrunt -v

          # Install Chamber
          wget https://github.com/segmentio/chamber/releases/download/v2.10.4/chamber-v2.10.4-linux-amd64
          chmod +x chamber-v2.10.4-linux-amd64
          sudo mv chamber-v2.10.4-linux-amd64 /usr/local/bin/chamber
          chamber version

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.GH_ROLE_ARN }}
          role-session-name: git

      - name: Assume Terraform Role
        id: assume-terraform-role
        run: |
          aws sts assume-role --role-arn ${{ secrets.TF_ROLE_ARN }} --role-session-name git --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' --output text

      - name: Download plan output artifact
        uses: actions/download-artifact@v4
        with:
          name: terragrunt-plan-output-${{ inputs.environment }}
          path: ./terragrunt/environments/${{ inputs.environment }}

      - name: Run Terragrunt apply
        run: |
          cd ./terragrunt/environments/${{ inputs.environment }}
          terragrunt run-all apply plan_output.json
