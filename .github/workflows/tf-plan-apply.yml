name: Plan and Apply IAC

on:
    workflow_call:
        inputs:
            environment:
                required: true
                type: string
        secrets:
            GH_ROLE_ARN:
                required: true
            TF_ROLE_ARN:
                required: false
            ROLE_ARN:
                required: true

permissions:
    id-token: write
    contents: read
            
jobs:
  plan:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          
          # Update package lists and install basic dependencies
          sudo apt-get update
          sudo apt-get install -y wget unzip jq

          # Install Terragrunt
          wget https://github.com/gruntwork-io/terragrunt/releases/download/v0.45.10/terragrunt_linux_amd64
          chmod +x terragrunt_linux_amd64
          sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt
          terragrunt -v

          # Install Chamber
          wget https://github.com/segmentio/chamber/releases/download/v2.10.4/chamber-v2.10.4-linux-amd64
          chmod +x chamber-v2.10.4-linux-amd64
          sudo mv chamber-v2.10.4-linux-amd64 /usr/local/bin/chamber
          chamber version
          

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.GH_ROLE_ARN }}

      - name: Assume Terraform Role
        run: |
            creds="$(aws sts assume-role --role-arn ${{ secrets.ROLE_ARN }} --role-session-name ${{ github.run_id }})"

            # Extract credentials and export to environment variables
            export AWS_ACCESS_KEY_ID=$(echo "$creds" | jq -r '.AccessKeyId')
            export AWS_SECRET_ACCESS_KEY=$(echo "$creds" | jq -r '.SecretAccessKey')
            export AWS_SESSION_TOKEN=$(echo "$creds" | jq -r '.SessionToken')
            export AWS_PROFILE=${{ github.run_id }}

            # Verify that credentials were set correctly
            if [ -z "$AWS_ACCESS_KEY_ID" ] || [ -z "$AWS_SECRET_ACCESS_KEY" ] || [ -z "$AWS_SESSION_TOKEN" ]; then
              echo "Failed to source credentials"
              exit 1
            fi

            # export credentials to shell env
            {
              echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID"
              echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY"
              echo "AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN"
              echo "AWS_PROFILE=$AWS_PROFILE"
            }  >> "$GITHUB_ENV"

      - name: Configure AWS terraform credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ env.AWS_SESSION_TOKEN }}

      - name: Source env vars using Chamber
        run: |
            export ENVIRONMENT="${{ inputs.environment }}"
            chamber env "$ENVIRONMENT" > /tmp/env_vars

            if [ -s /tmp/env_vars ]; then
                set -a
                source /tmp/env_vars
                set +a
                echo "Environment variables loaded successfully."
            else
                echo "Failed to load environment variables."
                exit 1
            fi
            

      - name: Initialize Terragrunt
        run: |
          cd ./terragrunt/environments/${{ inputs.environment }}
          terragrunt init
          

      - name: Run Terragrunt plan
        run: |
          cd ./terragrunt/environments/${{ inputs.environment }}
          terragrunt run-all plan -out=tfplan
          terragrunt show -json tfplan > plan_output.json
          

      - name: Upload plan output as artifact
        uses: actions/upload-artifact@v3
        with:
          name: terragrunt-plan-output-${{ inputs.environment }}
          path: ./terragrunt/environments/${{ inputs.environment }}/plan_output.json

  apply:
    runs-on: ubuntu-latest
    needs: [plan]
    if: github.event_name == 'pull_request' && contains(github.base_ref, 'refs/heads/master')

    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |

          # Update package lists and install basic dependencies
          sudo apt-get update
          sudo apt-get install -y wget unzip jq

          # Install Terragrunt
          wget https://github.com/gruntwork-io/terragrunt/releases/download/v0.45.10/terragrunt_linux_amd64
          chmod +x terragrunt_linux_amd64
          sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt
          terragrunt -v

          # Install Chamber
          wget https://github.com/segmentio/chamber/releases/download/v2.10.4/chamber-v2.10.4-linux-amd64
          chmod +x chamber-v2.10.4-linux-amd64
          sudo mv chamber-v2.10.4-linux-amd64 /usr/local/bin/chamber
          chamber version
          

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.GH_ROLE_ARN }}

      - name: Assume Terraform Role
        run: |
            creds="$(aws sts assume-role --role-arn ${{ secrets.ROLE_ARN }} --role-session-name ${{ github.run_id }})"

            # Extract credentials and export to environment variables
            export AWS_ACCESS_KEY_ID=$(echo "$creds" | jq -r '.AccessKeyId')
            export AWS_SECRET_ACCESS_KEY=$(echo "$creds" | jq -r '.SecretAccessKey')
            export AWS_SESSION_TOKEN=$(echo "$creds" | jq -r '.SessionToken')
            export AWS_PROFILE=${{ github.run_id }}

            # Verify that credentials were set correctly
            if [ -z "$AWS_ACCESS_KEY_ID" ] || [ -z "$AWS_SECRET_ACCESS_KEY" ] || [ -z "$AWS_SESSION_TOKEN" ]; then
              echo "Failed to source credentials"
              exit 1
            fi
            
            # export credentials to shell env
            {
              echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID"
              echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY"
              echo "AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN"
              echo "AWS_PROFILE=$AWS_PROFILE"
            }  >> "$GITHUB_ENV"

      - name: Configure AWS terraform credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ env.AWS_SESSION_TOKEN }}

      - name: Source env vars using Chamber
        run: |
            export ENVIRONMENT="${{ inputs.environment }}"
            chamber env "$ENVIRONMENT" > /tmp/env_vars

            if [ -s /tmp/env_vars ]; then
                set -a
                source /tmp/env_vars
                set +a
                echo "Environment variables loaded successfully."
            else
                echo "Failed to load environment variables."
                exit 1
            fi

      - name: Download plan output artifact
        uses: actions/download-artifact@v4
        with:
          name: terragrunt-plan-output-${{ inputs.environment }}
          path: ./terragrunt/environments/${{ inputs.environment }}

      - name: Run Terragrunt apply
        run: |
          cd ./terragrunt/environments/${{ inputs.environment }}
          terragrunt run-all apply plan_output.json
          