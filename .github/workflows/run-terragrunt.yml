name: Plan and Apply IAC
on:  
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - 'master'
jobs:
  setup-and-plan:
    if: github.ref != 'refs/heads/master'
    runs-on: ubuntu-latest
    environment: Dev
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          # Update package lists and install basic dependencies
          sudo apt-get update
          sudo apt-get install -y wget unzip jq

          # Install Terragrunt
          wget https://github.com/gruntwork-io/terragrunt/releases/download/v0.45.10/terragrunt_linux_amd64
          chmod +x terragrunt_linux_amd64
          sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt
          terragrunt -v

          # Install Chamber
          wget https://github.com/segmentio/chamber/releases/download/v2.10.4/chamber-v2.10.4-linux-amd64
          chmod +x chamber-v2.10.4-linux-amd64
          sudo mv chamber-v2.10.4-linux-amd64 /usr/local/bin/chamber
          chamber version

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-2"
          role-to-assume: ${{ secrets.TF_ROLE_ARN }}

      - name: Source env vars using Chamber
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            export ENVIRONMENT="staging"
          else
            export ENVIRONMENT="dev"
          fi

          eval $(chamber env $ENVIRONMENT)
          echo "Environment variables loaded."

      - name: Initialize Terragrunt
        run: |
          cd environments/$ENVIRONMENT
          terragrunt init

      - name: Run Terragrunt plan
        run: |
          cd environments/$ENVIRONMENT
          terragrunt run-all plan -out=tfplan
          terragrunt show -json tfplan > plan_output.json

      - name: Upload plan output as artifact
        uses: actions/upload-artifact@v3
        with:
          name: terragrunt-plan-output
          path: environments/$ENVIRONMENT/plan_output.json

  apply:
    if: github.event_name == 'pull_request' && contains(github.base_ref, 'refs/heads/master')
    runs-on: ubuntu-latest
    needs: setup-and-plan
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          # Update package lists and install basic dependencies
          sudo apt-get update
          sudo apt-get install -y wget unzip jq

          # Install Terragrunt
          wget https://github.com/gruntwork-io/terragrunt/releases/download/v0.45.10/terragrunt_linux_amd64
          chmod +x terragrunt_linux_amd64
          sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt
          terragrunt -v

          # Install AWS CLI
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          aws --version

          # Install Chamber
          wget https://github.com/segmentio/chamber/releases/download/v2.10.4/chamber-v2.10.4-linux-amd64
          chmod +x chamber-v2.10.4-linux-amd64
          sudo mv chamber-v2.10.4-linux-amd64 /usr/local/bin/chamber
          chamber --version

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-2"
          role-to-assume: ${{ secrets.TERRAFORM_ROLE_ARN }}


      - name: Download plan output artifact
        uses: actions/download-artifact@v4
        with:
          name: terragrunt-plan-output
          path: environments/$ENVIRONMENT

      - name: Run Terragrunt apply
        run: |
          cd environments/$ENVIRONMENT
          terragrunt run-all apply plan_output.json
