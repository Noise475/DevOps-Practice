on:
    workflow_call:
        inputs:
            environment:
                required: true
                type: string

        secrets:
            GH_ROLE_ARN:
                required: true
            TF_ROLE_ARN:
                required: true
            

permissions:
    id-token: write
    contents: read
            
jobs:
  apply:
    runs-on: ubuntu-latest

    environment: ${{ inputs.environment }}
    steps:
      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Install Dependencies 
        run: |

            # Update package lists and install basic dependencies
            sudo apt-get update
            sudo apt-get install -y wget unzip jq

            # Install Terragrunt
            wget https://github.com/gruntwork-io/terragrunt/releases/download/v0.45.10/terragrunt_linux_amd64
            chmod +x terragrunt_linux_amd64
            sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt
            terragrunt -v

            # Install Chamber
            wget https://github.com/segmentio/chamber/releases/download/v2.10.4/chamber-v2.10.4-linux-amd64
            chmod +x chamber-v2.10.4-linux-amd64
            sudo mv chamber-v2.10.4-linux-amd64 /usr/local/bin/chamber
            chamber version
                
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
            aws-region: ${{ vars.AWS_REGION }}
            role-to-assume: ${{ secrets.GH_ROLE_ARN }}

      - name: Run Terragrunt apply
        run: |

            # Assume the env IAM role and get temporary credentials
            CREDENTIALS="$(aws sts assume-role --role-arn ${{ secrets.TF_ROLE_ARN }} --role-session-name ${{ github.run_id }})"

            # Check if the assume-role command was successful
            if [ ! "$CREDENTIALS" ]; then
                echo "Failed to assume role"
                exit 1
            fi

            # Extract the temporary credentials from the JSON response
            AWS_ACCESS_KEY_ID=$(echo "$CREDENTIALS" | jq -r '.Credentials.AccessKeyId')
            AWS_SECRET_ACCESS_KEY=$(echo "$CREDENTIALS" | jq -r '.Credentials.SecretAccessKey')
            AWS_SESSION_TOKEN=$(echo "$CREDENTIALS" | jq -r '.Credentials.SessionToken')
  
            export AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY
            export AWS_SESSION_TOKEN

            # Source parameter store vars via chamber
            export ENVIRONMENT="${{ inputs.environment }}"
            chamber env "$ENVIRONMENT" > /tmp/env_vars

            if [ -s /tmp/env_vars ]; then
                set -a
                source /tmp/env_vars
                set +a
                echo "Environment variables loaded successfully."
            else
                echo "Failed to load environment variables."
                exit 1
            fi

            # Run ${{ inputs.environment}} terragrunt apply
            cd ./terragrunt/aws_region/"$REGION"/environments/"$ENVIRONMENT"
            terragrunt run-all apply --terragrunt-non-interactive
